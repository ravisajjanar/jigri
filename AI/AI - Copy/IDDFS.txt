def printGrid(matrix):
    state = matrix.copy()
    state[state.index(-1)] = ' '
    print(
        f"""
        {state[0]} {state[1]} {state[2]}
        {state[3]} {state[4]} {state[5]}
        {state[6]} {state[7]} {state[8]}
        """
    )


def gen(state, b, d):
    x = []
    for i in d:
        temp = state.copy()
        if i == 'u':
            temp[b], temp[b - 3] = temp[b - 3], temp[b]
        elif i == 'd':
            temp[b], temp[b + 3] = temp[b + 3], temp[b]
        elif i == 'l':
            temp[b], temp[b - 1] = temp[b - 1], temp[b]
        elif i == 'r':
            temp[b], temp[b + 1] = temp[b + 1], temp[b]
        x.append(temp)
    return x


def possible(state, visited):
    b = state.index(-1)
    d = []

    if b not in (0, 1, 2):
        d.append('u')
    if b not in (6, 7, 8):
        d.append('d')
    if b not in (0, 3, 6):
        d.append('l')
    if b not in (2, 5, 8):
        d.append('r')
    return [move for move in gen(state, b, d) if tuple(move) not in visited]


def dfs(src, tgt, limit, visited):
    if src == tgt:
        return True
    if limit <= 0:
        return False
    visited.add(tuple(src))
    for move in possible(src, visited):
        printGrid(src)
        if dfs(move, tgt, limit - 1, visited):
            return True
    return False


def iddfs(src, tgt, depth):
    visited = set()
    for i in range(1,depth+1):
        print("Level "+str(i))
        if dfs(src, tgt, i , visited):
            print("Pattern Matched... Success!!")
            return
    print("Failed!!!")


src = [1, 2, 3, 4, 5, 6, 7, 8, -1]
tgt = [1, 2, 3, 4, 5, 6, -1,7, 8]
depth = 25
iddfs(src, tgt, depth)
